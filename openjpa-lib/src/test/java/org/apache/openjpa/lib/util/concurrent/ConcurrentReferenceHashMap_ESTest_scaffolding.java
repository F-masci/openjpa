/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Aug 17 23:45:59 GMT 2025
 */

package org.apache.openjpa.lib.util.concurrent;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ConcurrentReferenceHashMap_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = SandboxMode.RECOMMENDED;
    Sandbox.initializeSecurityManagerForSUT();
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    Sandbox.goingToExecuteSUTCode();
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    Sandbox.doneWithExecutingSUTCode();
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ConcurrentReferenceHashMap_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$Values",
      "org.apache.openjpa.lib.util.ReferenceMap",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceEntrySet",
      "org.apache.openjpa.lib.util.collections.MapIterator",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceEntry",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceValues",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$WeakRef",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceValuesIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$Entry",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceEntrySetIterator",
      "org.apache.openjpa.lib.util.SizedMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$WeakEntry",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$HardEntry",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$KeySet",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$EntrySet",
      "org.apache.openjpa.lib.util.collections.IterableMap",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceMapIterator",
      "org.apache.openjpa.lib.util.collections.AbstractHashedMap$HashEntry",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceKeySet",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$1",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceStrength",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$2",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceBaseIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentMap",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$SoftEntry",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$HashIterator",
      "org.apache.openjpa.lib.util.collections.KeyValue",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$3",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$4",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceKeySetIterator",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$SoftRef"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.BiConsumer", false, ConcurrentReferenceHashMap_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.function.BiFunction", false, ConcurrentReferenceHashMap_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ConcurrentReferenceHashMap_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$WeakEntry",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$SoftEntry",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$HardEntry",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$HashIterator",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$1",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$2",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$3",
      "org.apache.openjpa.lib.util.collections.AbstractReferenceMap$ReferenceStrength",
      "org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$4"
    );
  }
}
