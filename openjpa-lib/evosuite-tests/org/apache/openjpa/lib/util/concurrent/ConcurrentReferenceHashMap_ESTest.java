/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 17 23:45:59 GMT 2025
 */

package org.apache.openjpa.lib.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.openjpa.lib.util.collections.AbstractReferenceMap;
import org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ConcurrentReferenceHashMap_ESTest extends ConcurrentReferenceHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1);
      Function<Object, Object> function0 = Function.identity();
      concurrentReferenceHashMap0.computeIfAbsent(abstractReferenceMap_ReferenceStrength0, function0);
      concurrentReferenceHashMap0.get((Object) null);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1);
      Function<Object, Object> function0 = Function.identity();
      concurrentReferenceHashMap0.computeIfAbsent(abstractReferenceMap_ReferenceStrength0, function0);
      concurrentReferenceHashMap0.containsKey((Object) null);
      assertFalse(concurrentReferenceHashMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      BiFunction<Object, ConcurrentReferenceHashMap, ConcurrentReferenceHashMap> biFunction0 = (BiFunction<Object, ConcurrentReferenceHashMap, ConcurrentReferenceHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).toString();
      concurrentReferenceHashMap0.setMaxSize(0);
      concurrentReferenceHashMap0.putIfAbsent(biFunction0, (Object) null);
      boolean boolean0 = concurrentReferenceHashMap0.isFull();
      assertEquals(1, concurrentReferenceHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 0.0
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      int int0 = concurrentReferenceHashMap0.size();
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      BiFunction<Object, Object, ConcurrentReferenceHashMap> biFunction0 = (BiFunction<Object, Object, ConcurrentReferenceHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(concurrentReferenceHashMap0).when(biFunction0).apply(any() , any());
      concurrentReferenceHashMap0.compute(concurrentReferenceHashMap0, biFunction0);
      int int0 = concurrentReferenceHashMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1417);
      int int0 = concurrentReferenceHashMap0.hc((Object) null);
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1417);
      Object object0 = concurrentReferenceHashMap0.getOrDefault((Object) null, abstractReferenceMap_ReferenceStrength0);
      int int0 = concurrentReferenceHashMap0.hc(object0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      assertFalse(concurrentReferenceHashMap0.isFull());
      
      concurrentReferenceHashMap0.setMaxSize(0);
      int int0 = concurrentReferenceHashMap0.getMaxSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 2);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.get(abstractReferenceMap_ReferenceStrength0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      BiFunction<Object, ConcurrentReferenceHashMap, ConcurrentReferenceHashMap> biFunction0 = (BiFunction<Object, ConcurrentReferenceHashMap, ConcurrentReferenceHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = concurrentReferenceHashMap0.eq(biFunction0, biFunction0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1);
      Function<Object, Object> function0 = Function.identity();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = (AbstractReferenceMap.ReferenceStrength)concurrentReferenceHashMap0.computeIfAbsent(abstractReferenceMap_ReferenceStrength0, function0);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, 0);
      int int0 = concurrentReferenceHashMap1.capacity();
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap1.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap1.remove((Object) concurrentReferenceHashMap0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.putAll((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 1417);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      BiFunction<Object, ConcurrentReferenceHashMap, Object> biFunction0 = (BiFunction<Object, ConcurrentReferenceHashMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(concurrentReferenceHashMap0).when(biFunction0).apply(any() , any(org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap.class));
      concurrentReferenceHashMap1.compute((Object) null, biFunction0);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.putAll(concurrentReferenceHashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null references not supported
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap((AbstractReferenceMap.ReferenceStrength) null, abstractReferenceMap_ReferenceStrength0);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap1.put(abstractReferenceMap_ReferenceStrength0, concurrentReferenceHashMap0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.get(abstractReferenceMap_ReferenceStrength0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.containsKey(abstractReferenceMap_ReferenceStrength0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 6063);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, concurrentReferenceHashMap0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, (Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = (AbstractReferenceMap.ReferenceStrength)concurrentReferenceHashMap0.getOrDefault(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.put(concurrentReferenceHashMap0, abstractReferenceMap_ReferenceStrength1);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = null;
      try {
        concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap((AbstractReferenceMap.ReferenceStrength) null, abstractReferenceMap_ReferenceStrength1, concurrentReferenceHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Either keys or values must use hard references.
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Either keys or values must use hard references.
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.getOrDefault(abstractReferenceMap_ReferenceStrength0, (Object) null);
      Iterator iterator0 = concurrentReferenceHashMap0.randomEntryIterator();
      Object object0 = concurrentReferenceHashMap0.clone();
      concurrentReferenceHashMap0.put(object0, object0);
      BiFunction<Object, ConcurrentReferenceHashMap, Object> biFunction0 = (BiFunction<Object, ConcurrentReferenceHashMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.merge(concurrentReferenceHashMap1, iterator0, biFunction0);
      ConcurrentReferenceHashMap concurrentReferenceHashMap2 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, concurrentReferenceHashMap0);
      assertEquals(3, concurrentReferenceHashMap0.size());
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1417);
      HashMap<Object, ConcurrentReferenceHashMap> hashMap0 = new HashMap<Object, ConcurrentReferenceHashMap>();
      hashMap0.put((Object) null, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.putAll(hashMap0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.removeRandom();
      assertEquals(0, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.removeRandom();
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.removeRandom();
      assertTrue(concurrentReferenceHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      concurrentReferenceHashMap0.overflowRemoved(concurrentReferenceHashMap0, (Object) null);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      hashMap0.put(concurrentReferenceHashMap0, (Object) null);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(concurrentReferenceHashMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, concurrentReferenceHashMap0);
      BiFunction<Object, Object, ConcurrentReferenceHashMap> biFunction0 = (BiFunction<Object, Object, ConcurrentReferenceHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReferenceHashMap1.merge(concurrentReferenceHashMap1, abstractReferenceMap_ReferenceStrength1, biFunction0);
      BiFunction<Object, ConcurrentReferenceHashMap, ConcurrentReferenceHashMap> biFunction1 = (BiFunction<Object, ConcurrentReferenceHashMap, ConcurrentReferenceHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any(org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap.class));
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap1.replaceAll(biFunction1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Attempt to reset reference value.
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$SoftEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, 2);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertEquals(1, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, 2);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, abstractReferenceMap_ReferenceStrength1);
      assertEquals(2, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      hashMap0.put(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      assertFalse(concurrentReferenceHashMap0.isFull());
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.put(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      BiFunction<Object, ConcurrentReferenceHashMap, Object> biFunction0 = (BiFunction<Object, ConcurrentReferenceHashMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap.class));
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.replaceAll(biFunction0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Attempt to reset reference value.
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap$WeakEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, 2);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.replace((Object) abstractReferenceMap_ReferenceStrength0, (Object) abstractReferenceMap_ReferenceStrength1);
      assertEquals(1, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent((Object) null, (Object) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(concurrentReferenceHashMap0, abstractReferenceMap_ReferenceStrength0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(concurrentReferenceHashMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(concurrentReferenceHashMap0, abstractReferenceMap_ReferenceStrength0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(concurrentReferenceHashMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 2);
      Object object0 = concurrentReferenceHashMap0.clone();
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(object0, (Object) null);
      concurrentReferenceHashMap0.randomEntryIterator();
      Object object1 = new Object();
      concurrentReferenceHashMap0.put(object1, object0);
      concurrentReferenceHashMap0.clone();
      assertEquals(3, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.clear();
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertEquals(0, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.setMaxSize(0);
      assertEquals(0, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      Iterator iterator0 = concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, iterator0);
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.setMaxSize(0);
      assertEquals(0, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.entrySet();
      concurrentReferenceHashMap0.put(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.put((Object) null, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.remove((Object) null, (Object) null);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = (ConcurrentReferenceHashMap)concurrentReferenceHashMap0.getOrDefault((Object) null, abstractReferenceMap_ReferenceStrength1);
      BiFunction<Object, ConcurrentReferenceHashMap, Object> biFunction0 = (BiFunction<Object, ConcurrentReferenceHashMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(biFunction0).toString();
      concurrentReferenceHashMap0.merge(abstractReferenceMap_ReferenceStrength0, concurrentReferenceHashMap1, biFunction0);
      concurrentReferenceHashMap0.randomEntryIterator();
      Object object0 = new Object();
      ConcurrentReferenceHashMap concurrentReferenceHashMap2 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap1.put(biFunction0, object0);
      concurrentReferenceHashMap0.remove((Object) null);
      assertEquals(4, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.remove((Object) null);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      concurrentReferenceHashMap0.remove((Object) null);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength1, (Object) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(concurrentReferenceHashMap0, abstractReferenceMap_ReferenceStrength0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(concurrentReferenceHashMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 2);
      Object object0 = concurrentReferenceHashMap0.getOrDefault(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, object0);
      concurrentReferenceHashMap0.put(concurrentReferenceHashMap0, object0);
      assertEquals(1, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null references not supported
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      // Undeclared exception!
      try { 
        concurrentReferenceHashMap0.put((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null references not supported
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, 2);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      boolean boolean0 = concurrentReferenceHashMap0.containsKey(abstractReferenceMap_ReferenceStrength1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      boolean boolean0 = concurrentReferenceHashMap0.containsKey(abstractReferenceMap_ReferenceStrength0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.replace((Object) null, (Object) null);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, (Object) null);
      boolean boolean0 = concurrentReferenceHashMap0.containsValue((Object) null);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      boolean boolean0 = concurrentReferenceHashMap0.containsValue((Object) null);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      boolean boolean0 = concurrentReferenceHashMap0.containsValue((Object) null);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      boolean boolean0 = concurrentReferenceHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertTrue(concurrentReferenceHashMap0.isEmpty());
      
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      boolean boolean0 = concurrentReferenceHashMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      assertFalse(concurrentReferenceHashMap0.isFull());
      
      concurrentReferenceHashMap0.setMaxSize(0);
      boolean boolean0 = concurrentReferenceHashMap0.isFull();
      assertEquals(0, concurrentReferenceHashMap0.getMaxSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, hashMap0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      
      concurrentReferenceHashMap0.setMaxSize(1);
      boolean boolean0 = concurrentReferenceHashMap0.isFull();
      assertEquals(1, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      boolean boolean0 = concurrentReferenceHashMap0.isFull();
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.setMaxSize((-1484));
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Either keys or values must use hard references.
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 775, (-2353.44F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: -2353.44
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 2.0
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = null;
      try {
        concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, (-560), (-560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Initial Capacity: -560
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, concurrentReferenceHashMap0);
      boolean boolean0 = concurrentReferenceHashMap0.containsValue(concurrentReferenceHashMap1);
      assertEquals(1, concurrentReferenceHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      boolean boolean0 = concurrentReferenceHashMap0.containsValue(concurrentReferenceHashMap0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      boolean boolean0 = concurrentReferenceHashMap0.eq((Object) null, abstractReferenceMap_ReferenceStrength0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.values();
      Collection collection0 = concurrentReferenceHashMap0.values();
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      concurrentReferenceHashMap0.removeExpired();
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      int int0 = concurrentReferenceHashMap0.getMaxSize();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, hashMap0);
      int int0 = concurrentReferenceHashMap0.capacity();
      assertEquals(11, int0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      concurrentReferenceHashMap0.valueExpired(concurrentReferenceHashMap0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1111);
      float float0 = concurrentReferenceHashMap0.loadFactor();
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertEquals(0.75F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0);
      Object object0 = new Object();
      concurrentReferenceHashMap0.keyExpired(object0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.replace((Object) concurrentReferenceHashMap0, (Object) abstractReferenceMap_ReferenceStrength0);
      assertEquals(1, concurrentReferenceHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.putIfAbsent(concurrentReferenceHashMap0, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.remove((Object) concurrentReferenceHashMap0);
      assertTrue(concurrentReferenceHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength1);
      concurrentReferenceHashMap0.randomEntryIterator();
      ConcurrentReferenceHashMap concurrentReferenceHashMap1 = (ConcurrentReferenceHashMap)concurrentReferenceHashMap0.clone();
      concurrentReferenceHashMap0.put(concurrentReferenceHashMap1, concurrentReferenceHashMap1);
      Object object0 = new Object();
      BiFunction<Object, ConcurrentReferenceHashMap, Object> biFunction0 = (BiFunction<Object, ConcurrentReferenceHashMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = concurrentReferenceHashMap0.merge(abstractReferenceMap_ReferenceStrength0, object0, biFunction0);
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap0.setMaxSize(0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReferenceHashMap0.forEach(biConsumer0);
      concurrentReferenceHashMap0.randomEntryIterator();
      concurrentReferenceHashMap1.remove(object1);
      assertEquals(0, concurrentReferenceHashMap0.size());
      assertTrue(concurrentReferenceHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, hashMap0);
      Set set0 = concurrentReferenceHashMap0.keySet();
      hashMap0.put(set0, concurrentReferenceHashMap0);
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertFalse(concurrentReferenceHashMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      concurrentReferenceHashMap0.keySet();
      Set set0 = concurrentReferenceHashMap0.keySet();
      assertEquals(Integer.MAX_VALUE, concurrentReferenceHashMap0.getMaxSize());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ConcurrentReferenceHashMap concurrentReferenceHashMap0 = new ConcurrentReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 2);
      concurrentReferenceHashMap0.put(abstractReferenceMap_ReferenceStrength1, concurrentReferenceHashMap0);
      concurrentReferenceHashMap0.putIfAbsent(abstractReferenceMap_ReferenceStrength0, concurrentReferenceHashMap0);
      assertEquals(2, concurrentReferenceHashMap0.size());
  }
}
