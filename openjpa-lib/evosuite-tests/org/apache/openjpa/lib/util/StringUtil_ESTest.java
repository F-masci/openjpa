/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 11 23:40:00 GMT 2025
 */

package org.apache.openjpa.lib.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.openjpa.lib.util.StringUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = StringUtil.parse("", class0);
      assertEquals('\u0000', (char)character0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtil.stripEnd("$", "NrD/?5b;[YGCFO");
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtil.stripEnd("b6o;a6J[rX'#1::", "b6o;a6J[rX'#1::");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtil.stripEnd("ql)0*)BHND,", "");
      assertEquals("ql)0*)BHND,", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtil.stripEnd("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtil.stripEnd("j_02gzu8<8c= ", (String) null);
      assertEquals("j_02gzu8<8c=", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtil.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWithIgnoreCase("[", "VQ3(~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWithIgnoreCase("pp", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWithIgnoreCase("Jxg*5:)u/6E/{{mYqr", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtil.endsWithIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtil.uncapitalize("pv?vw");
      assertEquals("pv?vw", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtil.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringUtil.uncapitalize("'&z");
      assertEquals("'&z", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringUtil.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtil.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringUtil.capitalize("V");
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtil.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = StringUtil.parse((String) null, class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = StringUtil.parse("'", class0);
      assertEquals('\'', (char)character0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        StringUtil.parse("=lm00?", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // '=lm00?' is longer than one character.
         //
         verifyException("org.apache.openjpa.lib.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Character character0 = StringUtil.parse((String) null, class0);
      assertEquals('\u0000', (char)character0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.parse("S787]`FbOAU", (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // target type must not be null
         //
         verifyException("org.apache.openjpa.lib.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        StringUtil.parse("j_02gzu8<8c= ", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported type: java.lang.Object
         //
         verifyException("org.apache.openjpa.lib.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtil.replace("Cannot parse void type", "Cannot parse void type", (String) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtil.replace("Cannot parse void type", "Cannot parse void type", "?)HPh%5S");
      assertEquals("?)HPh%5S", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringUtil.replace("", "org.apache.openjpa.lib.util.StringUtil", "null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = StringUtil.join((Object[]) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = StringUtil.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = StringUtil.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = StringUtil.trimToNull("n P;zJ");
      assertEquals("n P;zJ", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = StringUtil.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = StringUtil.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = StringUtil.trim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = StringUtil.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = StringUtil.replace("~D_<9.p8Jy5%glefV", "^x-2Ut?XEHqY;j", (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("#X0*&*>kx", "#X0*&*>kx", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("M^xL[*kjnr.7|%@", "M^xL[*kjnr.7|%@", (-3));
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = StringUtil.split("\"uHK&H)@St0nBz$Lk=B)", "target type must not be null", 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.split("k7)", "k7)", 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.split("null", "", 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // token: []
         //
         verifyException("org.apache.openjpa.lib.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.split(" m9<", (String) null, 190);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // token: [null]
         //
         verifyException("org.apache.openjpa.lib.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = StringUtil.split((String) null, "p]elm", 1157);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = StringUtil.equalsIgnoreCase("Bqb66(k|%UT", "Bqb66(k|%UT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = StringUtil.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = StringUtil.equalsIgnoreCase("$", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = StringUtil.equalsIgnoreCase("'&z", "?H?4P)x?KT&@}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = StringUtil.contains("_cxqn/.;", '.');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = StringUtil.contains("Eqe$>vb-]xC$((dvr", 'P');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = StringUtil.contains((String) null, 'x');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = StringUtil.isNotBlank("Eqe$>vb-]xC$((dvr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = StringUtil.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = StringUtil.isNotEmpty("Cannot parse void type");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = StringUtil.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = StringUtil.isEmpty((String) null);
      assertTrue(boolean0);
  }
}
