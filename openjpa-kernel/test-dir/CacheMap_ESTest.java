/*
 * This file was automatically generated by EvoSuite
 * Mon Aug 11 20:10:42 GMT 2025
 */

package org.apache.openjpa.util;

import org.apache.openjpa.lib.util.LRUMap;
import org.apache.openjpa.lib.util.ReferenceHashMap;
import org.apache.openjpa.lib.util.SizedMap;
import org.apache.openjpa.lib.util.collections.AbstractReferenceMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class CacheMap_ESTest extends CacheMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      Object object0 = new Object();
      cacheMap0.cacheMapOverflowRemoved(object0, object0);
      boolean boolean0 = cacheMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      cacheMap0.put((Object) null, lRUMap0);
      LRUMap lRUMap1 = (LRUMap)cacheMap0.remove((Object) null);
      assertFalse(lRUMap1.isScanUntilRemovable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      cacheMap0.pin(lRUMap0);
      LRUMap lRUMap1 = new LRUMap();
      cacheMap0.put(lRUMap0, lRUMap1);
      BiFunction<LRUMap, LRUMap, LRUMap> biFunction0 = (BiFunction<LRUMap, LRUMap, LRUMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(LRUMap.class) , any(LRUMap.class));
      Object object0 = cacheMap0.computeIfPresent(lRUMap0, biFunction0);
      assertNull(object0);
  }

  /*@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      boolean boolean0 = cacheMap0.pin(lRUMap0);
      assertFalse(boolean0);
      
      BiFunction<LRUMap, LRUMap, LRUMap> biFunction0 = (BiFunction<LRUMap, LRUMap, LRUMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(lRUMap0).when(biFunction0).apply(any(LRUMap.class) , any(LRUMap.class));
      Object object0 = cacheMap0.compute(lRUMap0, biFunction0);
      LRUMap lRUMap1 = new LRUMap();
      Object object1 = cacheMap0.put(object0, lRUMap1);
      assertNotNull(object1);
      assertSame(object1, lRUMap0);
  }*/

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      cacheMap0.pin(lRUMap0);
      LRUMap lRUMap1 = new LRUMap();
      cacheMap0.put(lRUMap0, lRUMap1);
      BiFunction<LRUMap, LRUMap, LRUMap> biFunction0 = (BiFunction<LRUMap, LRUMap, LRUMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(lRUMap1).when(biFunction0).apply(any(LRUMap.class) , any(LRUMap.class));
      Object object0 = cacheMap0.computeIfPresent(lRUMap0, biFunction0);
      assertTrue(object0.equals((Object)lRUMap0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      SizedMap sizedMap0 = cacheMap0.softMap;
      cacheMap0.cacheMapOverflowRemoved((Object) null, sizedMap0);
      Object object0 = cacheMap0.replace((Object) null, (Object) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.setSoftReferenceSize(0);
      assertEquals(0, cacheMap0.getSoftReferenceSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1809));
      Set set0 = cacheMap0.getPinnedKeys();
      cacheMap0.softMapOverflowRemoved((Object) null, set0);
      assertEquals((-1), cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      Object object0 = new Object();
      BiFunction<CacheMap, CacheMap, CacheMap> biFunction0 = (BiFunction<CacheMap, CacheMap, CacheMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = cacheMap0.merge(object0, cacheMap0, biFunction0);
      cacheMap0.setCacheSize(0);
      assertSame(cacheMap0, object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, 10, 1871, 0.75F, 1871);
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, 125, 125, 0.75F);
      assertEquals(125, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      Set set0 = cacheMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      Object object0 = new Object();
      cacheMap0.entryRemoved(cacheMap0, object0, false);
      assertEquals((-1), cacheMap0.getSoftReferenceSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      cacheMap0.entryAdded((Object) null, (Object) null);
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      SizedMap sizedMap0 = cacheMap0.softMap;
      Object object0 = cacheMap0.remove((Map) sizedMap0, (Object) sizedMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1809));
      SizedMap sizedMap0 = cacheMap0.softMap;
      Object object0 = new Object();
      cacheMap0.put((Map) sizedMap0, (Object) null, object0);
      Object object1 = cacheMap0.remove((Map) sizedMap0, (Object) null);
      assertNotNull(object1);
      assertEquals((-1), cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      Object object0 = new Object();
      cacheMap0.cacheMapOverflowRemoved(object0, object0);
      Object object1 = cacheMap0.remove(object0);
      assertSame(object0, object1);
  }

  /*@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1843));
      BiFunction<Object, LRUMap, Object> biFunction0 = (BiFunction<Object, LRUMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(cacheMap0).when(biFunction0).apply(any() , any(LRUMap.class));
      CacheMap cacheMap1 = (CacheMap)cacheMap0.compute((Object) null, biFunction0);
      CacheMap cacheMap2 = (CacheMap)cacheMap1.put((Map) cacheMap0, (Object) null, (Object) cacheMap0);
      assertEquals((-1), cacheMap2.getCacheSize());
      assertNotNull(cacheMap2);
  }*/

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      boolean boolean0 = cacheMap0.isLRU();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      cacheMap0.setCacheSize(0);
      int int0 = cacheMap0.getCacheSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      Set set0 = cacheMap0.keySet();
      Object object0 = cacheMap0.get(set0);
      assertTrue(set0.isEmpty());
      assertNull(object0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      Object object0 = new Object();
      cacheMap0.cacheMapOverflowRemoved(object0, object0);
      Object object1 = cacheMap0.get(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      boolean boolean0 = cacheMap0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 0);
      // Undeclared exception!
      try { 
        cacheMap0.remove((Object) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      // Undeclared exception!
      try { 
        cacheMap0.putAll((Map) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.util.CacheMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      // Undeclared exception!
      try { 
        cacheMap0.putAll((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.util.CacheMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      Object object0 = new Object();
      LRUMap lRUMap0 = new LRUMap();
      // Undeclared exception!
      try { 
        cacheMap0.put((Map) null, object0, (Object) lRUMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.util.CacheMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceHashMap referenceHashMap0 = new ReferenceHashMap(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 260, 260);
      // Undeclared exception!
      try { 
        cacheMap0.put((Map) referenceHashMap0, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null keys not allowed
         //
         verifyException("org.apache.openjpa.lib.util.collections.AbstractReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1809));
      SizedMap sizedMap0 = cacheMap0.softMap;
      // Undeclared exception!
      try { 
        cacheMap0.put((Map) sizedMap0, (Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null references not supported
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 0);
      SizedMap sizedMap0 = cacheMap0.softMap;
      // Undeclared exception!
      try { 
        cacheMap0.put((Map) sizedMap0, (Object) sizedMap0, (Object) sizedMap0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 0);
      cacheMap0.setCacheSize((-362));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cacheMap0.put(object0, object0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 0);
      // Undeclared exception!
      try { 
        cacheMap0.pin((Object) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  /*@Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      Set set0 = cacheMap0.keySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = cacheMap0.merge(set0, set0, biFunction0);
      CacheMap cacheMap1 = new CacheMap(false, (-1));
      // Undeclared exception!
      try { 
        cacheMap1.containsKey(object0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }*/

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      CacheMap cacheMap0 = new CacheMap();
      // Undeclared exception!
      try { 
        cacheMap0.cacheMapOverflowRemoved(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null references not supported
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 0);
      // Undeclared exception!
      try { 
        cacheMap0.cacheMapOverflowRemoved("VVT&DntzFCT-^", "VVT&DntzFCT-^");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CacheMap cacheMap0 = null;
      try {
        cacheMap0 = new CacheMap(false, 2, 12, 12, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 12.0
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CacheMap cacheMap0 = null;
      try {
        cacheMap0 = new CacheMap(false, (-1412), (-1412), (-1412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: -1412.0
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CacheMap cacheMap0 = null;
      try {
        cacheMap0 = new CacheMap(true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.openjpa.lib.util.collections.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 367);
      cacheMap0.put((Object) null, (Object) null);
      boolean boolean0 = cacheMap0.containsKey((Object) null);
      assertEquals(367, cacheMap0.getCacheSize());
      assertTrue(boolean0);
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      SizedMap sizedMap0 = cacheMap0.softMap;
      Object object0 = new Object();
      cacheMap0.cacheMapOverflowRemoved(object0, sizedMap0);
      Object object1 = cacheMap0.put(object0, cacheMap0);
      assertFalse(cacheMap0.isLRU());
      assertNotNull(object1);
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cacheMap0.get(object0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.openjpa.lib.util.concurrent.ConcurrentReferenceHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      // Undeclared exception!
      try { 
        cacheMap0.writeUnlock();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.locks.ReentrantReadWriteLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      cacheMap0.writeLock();
      cacheMap0.writeUnlock();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      // Undeclared exception!
      try { 
        cacheMap0.remove((Map) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.openjpa.util.CacheMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, 1000);
      cacheMap0.readLock();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      // Undeclared exception!
      try { 
        cacheMap0.readUnlock();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // attempt to unlock read lock, not locked by current thread
         //
         verifyException("java.util.concurrent.locks.ReentrantReadWriteLock$Sync", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      Set set0 = cacheMap0.keySet();
      cacheMap0.put((Map) cacheMap0, (Object) null, (Object) set0);
      assertEquals(1, set0.size());
      
      int int0 = cacheMap0.size();
      assertEquals(1, int0);
  }

  /*@Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1809));
      BiFunction<Object, LRUMap, Object> biFunction0 = (BiFunction<Object, LRUMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(cacheMap0).when(biFunction0).apply(any() , any(LRUMap.class));
      CacheMap cacheMap1 = (CacheMap)cacheMap0.compute((Object) null, biFunction0);
      boolean boolean0 = cacheMap1.pin((Object) null);
      assertTrue(boolean0);
      
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      cacheMap1.replaceAll(biFunction1);
      assertEquals((-1), cacheMap1.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1809));
      boolean boolean0 = cacheMap0.pin((Object) null);
      assertFalse(boolean0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      cacheMap0.replaceAll(biFunction0);
      assertTrue(cacheMap0.isLRU());
      assertEquals((-1), cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      Object object0 = new Object();
      cacheMap0.cacheMapOverflowRemoved(object0, object0);
      boolean boolean0 = cacheMap0.containsValue(object0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      boolean boolean0 = cacheMap0.pin(cacheMap0);
      assertFalse(boolean0);
      
      boolean boolean1 = cacheMap0.containsValue((Object) null);
      assertTrue(boolean1);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      boolean boolean0 = cacheMap0.containsValue((Object) null);
      assertFalse(boolean0);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      Function<Object, Object> function0 = Function.identity();
      cacheMap0.computeIfAbsent(abstractReferenceMap_ReferenceStrength0, function0);
      boolean boolean0 = cacheMap0.containsValue(abstractReferenceMap_ReferenceStrength0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(boolean0);
      assertFalse(cacheMap0.isLRU());
  }

  /*@Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      boolean boolean0 = cacheMap0.pin(lRUMap0);
      assertFalse(boolean0);
      
      BiFunction<LRUMap, LRUMap, LRUMap> biFunction0 = (BiFunction<LRUMap, LRUMap, LRUMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(lRUMap0).when(biFunction0).apply(any(LRUMap.class) , any(LRUMap.class));
      cacheMap0.compute(lRUMap0, biFunction0);
      boolean boolean1 = cacheMap0.containsKey(lRUMap0);
      assertFalse(cacheMap0.isLRU());
      assertTrue(boolean1);
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1809));
      boolean boolean0 = cacheMap0.isEmpty();
      assertTrue(cacheMap0.isLRU());
      assertTrue(boolean0);
      assertEquals((-1), cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      cacheMap0.put((Object) null, (Object) null);
      cacheMap0.clear();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false, 1263);
      Object object0 = cacheMap0.putIfAbsent((Object) null, "");
      assertNull(object0);
      
      cacheMap0.clear();
      assertFalse(cacheMap0.isLRU());
      assertEquals(1263, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      Object object0 = cacheMap0.remove((Object) cacheMap0);
      assertNull(object0);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      LRUMap lRUMap0 = new LRUMap();
      boolean boolean0 = cacheMap0.pin(lRUMap0);
      assertFalse(boolean0);
      
      Object object0 = cacheMap0.remove((Object) lRUMap0);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      LRUMap lRUMap0 = new LRUMap(800);
      lRUMap0.put("18|?hZ.", (Object) null);
      cacheMap0.putAll((Map) lRUMap0, false);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      LRUMap lRUMap0 = new LRUMap(800);
      lRUMap0.put((Object) null, (Object) null);
      cacheMap0.putAll((Map) lRUMap0, true);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      Object object0 = new Object();
      cacheMap0.put(object0, object0);
      Object object1 = cacheMap0.putIfAbsent(object0, (Object) null);
      assertNotNull(object1);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      boolean boolean0 = cacheMap0.unpin((Object) null);
      assertFalse(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(boolean0);
  }

  /*@Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-1809));
      BiFunction<Object, LRUMap, Object> biFunction0 = (BiFunction<Object, LRUMap, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(cacheMap0).when(biFunction0).apply(any() , any(LRUMap.class));
      CacheMap cacheMap1 = (CacheMap)cacheMap0.compute((Object) null, biFunction0);
      boolean boolean0 = cacheMap1.pin((Object) null);
      assertTrue(boolean0);
      
      boolean boolean1 = cacheMap0.unpin((Object) null);
      assertTrue(cacheMap0.isLRU());
      assertTrue(boolean1);
      assertEquals((-1), cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      LRUMap lRUMap0 = new LRUMap();
      boolean boolean0 = cacheMap0.pin(lRUMap0);
      assertFalse(boolean0);
      
      BiFunction<CacheMap, CacheMap, CacheMap> biFunction0 = (BiFunction<CacheMap, CacheMap, CacheMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(cacheMap0).when(biFunction0).apply(any(CacheMap.class) , any(CacheMap.class));
      cacheMap0.compute(cacheMap0, biFunction0);
      boolean boolean1 = cacheMap0.pin(cacheMap0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(boolean1);
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      LRUMap lRUMap0 = new LRUMap();
      boolean boolean0 = cacheMap0.pin(lRUMap0);
      assertFalse(boolean0);
      
      boolean boolean1 = cacheMap0.pin(cacheMap0);
      assertFalse(cacheMap0.isLRU());
      assertFalse(boolean1);
      assertEquals(1000, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      int int0 = cacheMap0.getSoftReferenceSize();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      cacheMap0.setSoftReferenceSize((-24));
      assertTrue(cacheMap0.isLRU());
      assertEquals(1000, cacheMap0.getCacheSize());
      assertEquals((-1), cacheMap0.getSoftReferenceSize());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.setSoftReferenceSize(125);
      int int0 = cacheMap0.getSoftReferenceSize();
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true, (-523));
      int int0 = cacheMap0.getCacheSize();
      assertEquals((-1), int0);
      assertTrue(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      int int0 = cacheMap0.getCacheSize();
      assertEquals(1000, int0);
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.toString();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      boolean boolean0 = cacheMap0.isLRU();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.softMapValueExpired((Object) null);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(false);
      Set set0 = cacheMap0.keySet();
      cacheMap0.setCacheSize(0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      cacheMap0.merge(set0, set0, biFunction0);
      assertEquals(0, cacheMap0.getCacheSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.values();
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap();
      cacheMap0.putAll((Map) cacheMap0);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CacheMap cacheMap0 = new CacheMap(true);
      cacheMap0.put((Object) null, (Object) null);
      LRUMap lRUMap0 = new LRUMap(800);
      lRUMap0.putAll(cacheMap0);
      cacheMap0.putAll((Map) lRUMap0, false);
      assertEquals(1000, cacheMap0.getCacheSize());
      assertTrue(cacheMap0.isLRU());
  }*/
}
