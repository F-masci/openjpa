<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->
<!--
    This build file is used to run the JPA TCK. It assumes that you have
    the TCK zip file located at:

        For JPA 1.0 -
            ${user.home}/.m2/privaterepos/jpa-1_0b-tck.zip
        For JPA 2.0 -
            ${user.home}/.m2/privaterepos/jpatck-2.0_15-Jun-2010.zip

    If you have that file in a different location, it can be specified with
    the "tck.zip" system property.

    The TCK will only be run if you have one of the following profiles enabled:

        For JPA 1.0 -
            -Ptck-profile
        For JPA 2.0 -
            -Ptck2-profile

    For the JPA 2.0 TCK, the default level used will be the latest available,
    but you can also test against prior levels by setting:
        -Dtck2.level=20091209

    As of JakartaEE you can freely download the TCK jars from here:
        https://download.eclipse.org/ee4j/jakartaee-tck/8.0.1/nightly/

    To set the TCK run time limit, use the "jpatck.run.tmo" system property to
    specify the timeout value in milliseconds. Default to 7200000 (2 hours).

    To run a specific package of tests, use the "jpatck.pkg.dir" system
    property to specify the parent directory of the tests you want to run.
    E.g.:

        mvn integration-test -Ptck2-profile -Djpatck.pkg.dir=com/sun/ts/tests/ejb30/persistence/inheritance/mappedsc/descriptors

    You can also run using another database (e.g., oracle) using command
    line properties. For example:

        mvn integration-test -Ddb.name=oracle -Ddb.driver=oracle.jdbc.driver.OracleDriver -Ddb.url=jdbc:oracle:thin:@dbhost:1526:dbname -Ddb.username=scott -Ddb.password=tiger -Ddb.jar=/tmp/oracle-jdbc.jar -Dtest=false -Ptck-profile -Djpatck.pkg.dir=com/sun/ts/tests/ejb30/persistence/query/apitests -Djpatck.test=queryAPITest15

    The TCK running process will do the following:

    1. Find the TCK zip file and extract it
    2. Create an openjpa-provier.properties file with the OpenJPA config
    3. Modify the TCK's main configuration file (ts.jte) to use OpenJPA
    4. Run the database initialization script
    5. Run the TCK script
    6. Parse the TCK result log to determine whether to fail the build or not
-->
<!--
    Please keep the project tag on one line to avoid confusing
    the release plugin.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.apache.openjpa</groupId>
    <artifactId>openjpa-integration</artifactId>
    <version>4.1.1-SNAPSHOT</version>
  </parent>
  <artifactId>openjpa-integration-tck</artifactId>
  <packaging>pom</packaging>
  <name>OpenJPA Integration Tests - JPA TCK</name>
  <description>OpenJPA Integration Tests - JPA TCK</description>
  <properties>
    <tck2.level>20110815</tck2.level>
  </properties>
  <profiles>
    <profile>
      <!-- vvvvvvvvvvvvvvvvvvv -->
      <!-- JPA 2.0 TCK Profile -->
      <!-- vvvvvvvvvvvvvvvvvvv -->
      <id>tck2-profile</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <phase>validate</phase>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireJavaVersion>
                      <version>[1.8,)</version>
                    </requireJavaVersion>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <!-- Just pull in openjpa-all, which will include all required deps -->
      <dependencies>
        <dependency>
          <groupId>org.apache.openjpa</groupId>
          <artifactId>openjpa-all</artifactId>
          <version>${project.version}</version>
        </dependency>
        <!-- The slf4j dependency is for bval 0.3-incubating -->
        <!-- This can be removed if we move to bval 0.5, where the slf4j dependency is removed -->
        <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-simple</artifactId>
          <version>${slf4j.version}</version>
        </dependency>
      </dependencies>
      <!-- ^^^^^^^^^^^^^^^^^^^ -->
      <!-- JPA 2.0 TCK Profile -->
      <!-- ^^^^^^^^^^^^^^^^^^^ -->
    </profile>
    <profile>
      <!-- vvvvvvvvvvvvvvvvvvvv -->
      <!-- JPA 1.0b TCK Profile -->
      <!-- vvvvvvvvvvvvvvvvvvvv -->
      <id>tck-profile</id>
      <build>
        <plugins>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>jakarta.persistence</groupId>
          <artifactId>jakarta.persistence-api</artifactId>
          <scope>compile</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.openjpa</groupId>
          <artifactId>openjpa-kernel</artifactId>
          <version>${project.version}</version>
        </dependency>
      </dependencies>
      <!-- ^^^^^^^^^^^^^^^^^^^^ -->
      <!-- JPA 1.0b TCK Profile -->
      <!-- ^^^^^^^^^^^^^^^^^^^^ -->
    </profile>
    <profile>
      <!--
                Example db2 profile. You can use this profile if you:
                1) have the DB2 artifacts installed in a local repo and supply the URL:
                    -Ddb2.maven.repo=http://my.local.repo
                2) have a copy of the DB2 JCC driver and run the following commands :
                    mvn install:install-file -Dfile=${path to db2jcc.jar} \
                                             -DgroupId=com.ibm.db2 \
                                             -DartifactId=jcc-driver \
                                             -Dversion=9.5 \
                                             -Dpackaging=jar

                    mvn install:install-file -Dfile=${path to db2jcc_license.jar} \
                                             -DgroupId=com.ibm.db2 \
                                             -DartifactId=jcc-license \
                                             -Dversion=9.5 \
                                             -Dpackaging=jar

                You must also set the following properties:
                    -Dopenjpa.db2.url=jdbc:db2://<HOST>:<PORT>/<DBNAME>
                    -Dopenjpa.db2.username=<db2_uid>
                    -Dopenjpa.db2.password=<db2_pwd>

                Optionally, you can override the default DB2 groupId,
                artifactIds and version by also supplying the following
                properties:
                    -Ddb2.groupid=com.ibm.db2
                    -Dids.driver.artifactid=jcc-driver
                    -Dids.license.artifactid=jcc-license
                    -Ddb2.version=9.5
            -->
      <id>test-db2-jcc</id>
      <activation>
        <property>
          <name>test-db2-jcc</name>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>${db2.groupid}</groupId>
          <artifactId>${db2.driver.artifactid}</artifactId>
          <version>${db2.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>${db2.groupid}</groupId>
          <artifactId>${db2.license.artifactid}</artifactId>
          <version>${db2.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <properties>
        <db2.maven.repo>http://not.a.real.repository</db2.maven.repo>
        <db2.groupid>com.ibm.db2</db2.groupid>
        <db2.driver.artifactid>jcc-driver</db2.driver.artifactid>
        <db2.license.artifactid>jcc-license</db2.license.artifactid>
        <db2.version>9.5</db2.version>
        <connection.driver.name>com.ibm.db2.jcc.DB2Driver</connection.driver.name>
        <connection.url>jdbc:db2://localhost:50000/tck</connection.url>
        <connection.url>${openjpa.db2.url}</connection.url>
        <connection.username>${openjpa.db2.username}</connection.username>
        <connection.password>${openjpa.db2.password}</connection.password>
        <jdbc.DBDictionary/>
        <tck.db.name>db2</tck.db.name>
      </properties>
      <repositories>
        <repository>
          <id>db2.repository</id>
          <name>DB2 Repository</name>
          <url>${db2.maven.repo}</url>
          <layout>default</layout>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
          <releases>
            <enabled>true</enabled>
            <checksumPolicy>ignore</checksumPolicy>
          </releases>
        </repository>
      </repositories>
    </profile>
  </profiles>
  <dependencies>
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
      <scope>compile</scope>
    </dependency>
  </dependencies>
</project>
